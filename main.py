from myserver import server_on
import discord
from discord.ui import View, Button, Modal, TextInput, Select
from discord import SelectOption
from datetime import datetime, timedelta
from discord.ext import commands
from io import BytesIO
import base64
import json
import os
import time
import pytz
import requests
import urllib3
import pyodbc

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ env
ENV_DATA = {
    'TOKEN': os.getenv("TOKEN"),
    'TMP_API_ENDPOINT': os.getenv("TMP_API_ENDPOINT"),
    'TMP_API_USERNAME': os.getenv("TMP_API_USERNAME"),
    'TMP_API_PASSWORD': os.getenv("TMP_API_PASSWORD"),
    'TMP_API_CONID': os.getenv("TMP_API_CONID"),
    'TMP_BANK_ACCODE': os.getenv("TMP_BANK_ACCODE"),
    'TMP_BANK_ACCOUNT': os.getenv("TMP_BANK_ACCOUNT"),
    'TMP_PROMMPAY_NO': os.getenv("TMP_PROMMPAY_NO"),
    'TMP_PROMMPAY_TYPE': os.getenv("TMP_PROMMPAY_TYPE"),
    'TMP_PROMMPAY_NAME': os.getenv("TMP_PROMMPAY_NAME"),
    'TOPUP_MULTIPLY': os.getenv("TOPUP_MULTIPLY"),
    'MSSQL_DRIVER': os.getenv("MSSQL_DRIVER"),
    'MSSQL_SERVER': os.getenv("MSSQL_SERVER"),
    'MSSQL_USERNAME': os.getenv("MSSQL_USERNAME"),
    'MSSQL_PASSWORD': os.getenv("MSSQL_PASSWORD")
}

# ‡∏õ‡∏¥‡∏î InsecureRequestWarning ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def verify_ip():
    urlip = url = "https://api.ipify.org?format=json"  # Only IPv4
    response = requests.get(urlip)

    if response.status_code == 200:
        ip_address = response.json().get("ip")
        print("Your Public IPv4 Address:", ip_address)

        url = f"https://oreocb.online/oreoAPI/vrfvmc.php?vmc=verymaocodein&mode=2&ip={ip_address}"

        response = requests.get(url)  # Use json=data for JSON payload

        print("Status Code:", response.status_code)
        print("Response Body:", response.text)

    else:
        print("Failed to get IP address:", response.status_code)

def connect_api(url):
    response = requests.get(url)

    if response.status_code == 200:
        return response
    else:
        print("Error:", response.status_code)
        return None
    
async def save_chat_logs(channel, user, path):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå text ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á"""
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á
    messages = [message async for message in channel.history(limit=1000)]  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 1000 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô UTC+7
    for message in messages:
        # ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å message ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UTC
        utc_time = message.created_at.replace(tzinfo=pytz.utc)  # ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô UTC
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å UTC ‡πÄ‡∏õ‡πá‡∏ô UTC+7
        local_time = utc_time.astimezone(pytz.timezone('Asia/Bangkok'))

        # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        message_time = local_time.strftime('%Y-%m-%d %H:%M:%S')  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß

    messages.reverse()  # ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô

    log_filename = f"{path}{channel.name}_{int(time.time())}.txt"

    with open(log_filename, "w", encoding="utf-8") as log_file:
        log_file.write(f"Chat log from {channel.name} (closed by {user.name}):\n")
        log_file.write("=" * 50 + "\n")

        for msg in messages:
            # ‡πÉ‡∏ä‡πâ message_time ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
            log_file.write(f"[{message_time}] {msg.author}: {msg.content}\n")
            
    print(f"‚úÖ Chat logs saved to {log_filename}")

class MSSQLDatabase:
    def __init__(self, ENV_DATA):
        self.driver = ENV_DATA['MSSQL_DRIVER']
        self.server = ENV_DATA['MSSQL_SERVER']
        self.username = ENV_DATA['MSSQL_USERNAME']
        self.password = ENV_DATA['MSSQL_PASSWORD']
        self.conn_str = f"DRIVER={self.driver};SERVER={self.server};UID={self.username};PWD={self.password}"
        self.conn = None
        self.cursor = None
        self.myconnect = False

    def connect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        while not self.myconnect:
            try:
                self.conn = pyodbc.connect(self.conn_str)
                self.cursor = self.conn.cursor()
                print("‚úÖ Connected to MSSQL successfully!")
                return True
            except pyodbc.Error as e:
                verify_ip()
                print("‚ùå Connection Error:", e)
                # return False
            time.sleep(.5)
        
    async def execute(self, query, params=()):
        """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL (INSERT, UPDATE, DELETE)"""
        if not self.cursor:
            print("‚ùå Error: No database connection")
            return False

        try:
            self.cursor.execute(query, params)
            self.conn.commit()
            print("‚úÖ Query executed successfully")
            return True
        except pyodbc.Error as e:
            print("‚ùå Query Error:", e)
            self.conn.rollback()
            return False

    async def fetch_all_with_cache(self, query, params=()):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡∏ä"""
        if not self.cursor:
            print("‚ùå Error: No database connection")
            return []

        current_time = time.time()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡∏ä
        if query not in self.cache:
            self.cache[query] = {}

        if params in self.cache[query]:
            cached_data = self.cache[query][params]
            if current_time - cached_data['timestamp'] < self.cache_expiry_time:
                print("‚úÖ Returning data from cache")
                return cached_data['data']
            else:
                print("üîÑ Cache expired, querying database...")

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏ä‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Ñ‡∏ä‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        try:
            self.cursor.execute(query, params)
            columns = [column[0] for column in self.cursor.description]
            result = [dict(zip(columns, row)) for row in self.cursor.fetchall()]

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÅ‡∏Ñ‡∏ä
            self.cache[query][params] = {'data': result, 'timestamp': current_time}
            print("‚úÖ Data fetched from database and cached.")
            return result
        except pyodbc.Error as e:
            print("‚ùå Query Error:", e)
            return []
         
    async def fetch_all(self, query, params=()):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏ä"""
        if not self.cursor:
            print("‚ùå Error: No database connection")
            return []

        try:
            self.cursor.execute(query, params)
            columns = [column[0] for column in self.cursor.description]
            return [dict(zip(columns, row)) for row in self.cursor.fetchall()]
        except pyodbc.Error as e:
            print("‚ùå Query Error:", e)
            return []
        
    async def fetch_one(self, query, params=()):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 row ‡∏à‡∏≤‡∏Å MSSQL"""
        if not self.cursor:
            print("‚ùå Error: No database connection")
            return None

        try:
            self.cursor.execute(query, params)
            row = self.cursor.fetchone()
            if row:
                columns = [column[0] for column in self.cursor.description]
                return dict(zip(columns, row))
            return None
        except pyodbc.Error as e:
            print("‚ùå Query Error:", e)
            return None
        
    def close(self):
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        try:
            if self.cursor:
                self.cursor.close()
            if self.conn:
                self.conn.close()
            print("üîå Connection closed")
        except Exception as e:
            print("‚ùå Error while closing connection:", e)

class TopupIDModal(Modal):
    def __init__(self, ENV_DATA, db, log=False):
        super().__init__(title="üìå ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏≠‡∏î‡∏µ")  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å constructor ‡∏Ç‡∏≠‡∏á Modal

        self.db = db  # ‡πÄ‡∏Å‡πá‡∏ö object db ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô instance
        self.log = log

        self.TMP_API_ENDPOINT = ENV_DATA['TMP_API_ENDPOINT']
        self.TMP_API_USERNAME = ENV_DATA['TMP_API_USERNAME']
        self.TMP_API_PASSWORD = ENV_DATA['TMP_API_PASSWORD']
        self.TMP_API_CONID = ENV_DATA['TMP_API_CONID']
        self.TMP_BANK_ACCODE = ENV_DATA['TMP_BANK_ACCODE']
        self.TMP_BANK_ACCOUNT = ENV_DATA['TMP_BANK_ACCOUNT']
        self.TMP_PROMMPAY_NO = ENV_DATA['TMP_PROMMPAY_NO']
        self.TMP_PROMMPAY_TYPE = ENV_DATA['TMP_PROMMPAY_TYPE']
        self.TMP_PROMMPAY_NAME = ENV_DATA['TMP_PROMMPAY_NAME']
        self.TOPUP_MULTIPLY = ENV_DATA['TOPUP_MULTIPLY']

    id_input = TextInput(label="üîπ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", placeholder="‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
        
    async def on_submit(self, interaction: discord.Interaction):
        user_id = self.id_input.value.strip()

        # üî¥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not user_id:
            embed = discord.Embed(
                title="‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                description="üîπ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        query = "SELECT [UserNum] FROM [Account].[dbo].[cabal_auth_table] WHERE [ID] = ?"
        result = await self.db.fetch_one(query, (user_id,))

        if not result:
            embed = discord.Embed(
                title="‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                description="üîπ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ user_id ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        guild = interaction.guild
        category = interaction.channel.category  

        if not category:
            category = await guild.create_category("Topup")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        existing_channel = discord.utils.get(category.channels, name=f"topup-{interaction.user.name}")
        if existing_channel:
            embed = discord.Embed(
                title="‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!",
                description=f"üîπ ‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {existing_channel.mention}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        channel_name = f"topup-{interaction.user.name}"
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False, send_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=False),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True),  # Allow the bot to send messages
        }

        footer = "‚ùó‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n"
        footer += "‚õî ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 00:00 - 02:00 ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ô ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞"

        topup_channel = await guild.create_text_channel(channel_name, category=category, overwrites=overwrites)
        # üî¥ ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á
        close_button = Button(label="‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á", style=discord.ButtonStyle.red)

        async def close_button_callback(close_interaction):
            if "topup-" in close_interaction.channel.name:
                if self.log:
                    await save_chat_logs(close_interaction.channel, interaction.user, 'log/topup/')

                await close_interaction.channel.delete()
            else:
                embed = discord.Embed(
                    title="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ!",
                    description="üîπ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                    color=discord.Color.red()
                )
                await close_interaction.response.send_message(embed=embed, ephemeral=True)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ callback
        close_button.callback = close_button_callback

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Select ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        select = Select(
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°",
            options=[
                SelectOption(label="50 ‡∏ö‡∏≤‡∏ó", value="50"),
                SelectOption(label="150 ‡∏ö‡∏≤‡∏ó", value="150"),
                SelectOption(label="300 ‡∏ö‡∏≤‡∏ó", value="300"),
                SelectOption(label="500 ‡∏ö‡∏≤‡∏ó", value="500"),
                SelectOption(label="1000 ‡∏ö‡∏≤‡∏ó", value="1000"),
                SelectOption(label="1500 ‡∏ö‡∏≤‡∏ó", value="1500")
            ]
        )

        async def select_callback(select_interaction: discord.Interaction):
            selected_price = select.values[0]

            # ‡πÉ‡∏ä‡πâ defer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
            await select_interaction.response.defer()

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á
            messages = []
            async for message in topup_channel.history():
                messages.append(message)

            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å
            messages.reverse()
            for message in messages[1:]:
                # print(message)
                await message.delete()
            # ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API
            getidpay_url = f'{self.TMP_API_ENDPOINT}?username={self.TMP_API_USERNAME}&password={self.TMP_API_PASSWORD}&amount={selected_price}'
            getidpay_url += f'&ref1={user_id}&con_id={self.TMP_API_CONID}&method=create_pay'
            getidpay_data = json.loads(connect_api(getidpay_url).text)

            if getidpay_data['status'] == 1:
                id_pay = getidpay_data['id_pay']
                getqr_url = f'{self.TMP_API_ENDPOINT}?username={self.TMP_API_USERNAME}&password={self.TMP_API_PASSWORD}&con_id={self.TMP_API_CONID}&id_pay={id_pay}'
                getqr_url += f'&type={self.TMP_PROMMPAY_TYPE}&promptpay_id={self.TMP_PROMMPAY_NO}&method=detail_pay'
                getqr_data = json.loads(connect_api(getqr_url).text)

                if getqr_data['status'] == 1:
                    if getqr_data['time_out'] < 0:
                        cancel_url = f'{self.TMP_API_ENDPOINT}?username={self.TMP_API_USERNAME}&password={self.TMP_API_PASSWORD}&con_id={self.TMP_API_CONID}'
                        cancel_url += f'&method=cancel&id_pay={id_pay}'
                        connect_api(cancel_url)
                        
                        # ‡∏™‡πà‡∏á Embed ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                        embed = discord.Embed(
                            title="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
                            description=f"üîπ **‡∏Ñ‡∏∏‡∏ì {interaction.user.mention}**\nüëª ‡πÑ‡∏≠‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°: {user_id}\nüí∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                            color=discord.Color.red()
                        )
                        embed.set_footer(text=footer)
                        
                        await select_interaction.edit_original_response(embed=embed)

                        return

                    image_data = base64.b64decode(getqr_data['qr_image_base64'])
                    image_bytes = BytesIO(image_data)

                    amount = "{:.2f}".format(int(getqr_data['amount_check']) / 100)
                    time_out = getqr_data['time_out']

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏° QR Code
                    CashTopup = int(selected_price) * int(self.TOPUP_MULTIPLY)

                    des = f"üîπ **‡∏Ñ‡∏∏‡∏ì {interaction.user.mention}**\n"
                    des += f"üëª ‡πÑ‡∏≠‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°: {user_id}\n"
                    des += f"üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°: {amount} ‡∏ö‡∏≤‡∏ó\n"
                    des += f"üßà ‡πÅ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ: {CashTopup} Cash\n"
                    des += f"üó°Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {self.TMP_PROMMPAY_NAME}\n"
                    des += f"üèõÔ∏è ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {self.TMP_PROMMPAY_NO}\n"

                    embed = discord.Embed(
                        title="‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß!",
                        description=des,
                        color=discord.Color.green()
                    )
                    expired = datetime.now() + timedelta(seconds=time_out)

                    formatted_time = expired.strftime("%Y/%m/%d %H:%M:%S")
                    footer_time = f'üìå ‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô\nüïì ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡∏≠‡∏ô: {formatted_time}\n'

                    embed.set_footer(text= (footer_time + footer) )

                    # ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Embed ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ discord.File
                    image_file = discord.File(image_bytes, filename="image.png")
                    embed.set_image(url="attachment://image.png")

                    # üî¥ ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á
                    confirm_button = Button(label="‡∏ï‡∏Å‡∏•‡∏á", style=discord.ButtonStyle.primary)

                    async def confirm_button_callback(confirm_interaction):
                        # print("wait api confirm")
                        confirm_url = f'{self.TMP_API_ENDPOINT}?username={self.TMP_API_USERNAME}&password={self.TMP_API_PASSWORD}'
                        confirm_url += f'&con_id={self.TMP_API_CONID}&method=confirm&id_pay={getqr_data["id_pay"]}'
                        confirm_url += f'&accode={self.TMP_BANK_ACCODE}&account_no={self.TMP_BANK_ACCOUNT}&ip=45.154.24.43'
                        confirm_data = json.loads(connect_api(confirm_url).text)

                        # print("wait api check status")
                        if confirm_data['status'] != 1:
                            print("error")
                            embed = discord.Embed(
                                title="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
                                description=f"‚ùó‚ö†Ô∏è‚Å¥‚Å∞‚Å¥{confirm_data['msg']}",
                                color=discord.Color.red()
                            )
                            embed.set_footer(text=footer)
                            await confirm_interaction.response.send_message(embed=embed, ephemeral=True)  # ‚úÖ ‡πÅ‡∏Å‡πâ interaction ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                            return
                        
                        rw_set = 0

                        match int(selected_price):
                            case 50:
                                rw_set=1
                            case 150:
                                rw_set=2
                            case 300:
                                rw_set=3
                            case 500:
                                rw_set=4
                            case 1000:
                                rw_set=5
                            case 1500:
                                rw_set=6
                            case 2000:
                                rw_set=7
                            case _:
                                rw_set=0

                        # CashTopup
                        # int(self.TOPUP_MULTIPLY)

                        query_topup = """
                        DECLARE @ID varchar(50) = ?
                        ,@rw_set INT = ? -- True ID
                        ,@CashADD INT = ? -- Cash

                        -- ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏≠‡∏∞‡πÑ‡∏£
                        DECLARE @UserNum int = 0
                                
                        -- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Item_Unit ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                        DECLARE @sumitem INT
                        SELECT @sumitem = SUM(Item_Unit)
                        FROM CabalLog.dbo.True_Log
                        WHERE True_ID = @rw_set;
                        SELECT @UserNum = UserNum From Account..cabal_auth_table WHERE ID = @ID

                        IF @UserNum != 0
                        BEGIN
                            UPDATE [CabalCash].[dbo].[CashAccount] SET [Cash] = [Cash] + @CashADD WHERE [UserNum] = @UserNum
                        
                            INSERT INTO CabalCash..CashLogNew (ID,CashADD,Reward)
                            VALUES (@ID,@CashADD,0)
                            INSERT INTO CabalCash..CashLogNewPP (ID,CashADD,Reward)
                            VALUES (@ID,@CashADD,0)

                            -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô @sumitem ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            IF @sumitem > 0
                            BEGIN
                                -- ‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡∏£‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                                DECLARE @Item_ID INT, @Item_Option INT, @Item_Duration INT, @Item_Unit INT;

                                DECLARE data_cursor CURSOR FOR
                                SELECT Item_ID, Item_Option, Item_Duration, Item_Unit
                                FROM CabalLog.dbo.True_Log
                                WHERE True_ID = @rw_set;

                                OPEN data_cursor;
                                FETCH NEXT FROM data_cursor INTO @Item_ID, @Item_Option, @Item_Duration, @Item_Unit;

                                WHILE @@FETCH_STATUS = 0
                                BEGIN
                                    -- ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Item_Unit
                                    DECLARE @i INT = 1;
                                    WHILE @i <= @Item_Unit
                                    BEGIN
                                        -- ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô up_addmycashitembyitem
                                        EXEC CabalCash.dbo.up_addmycashitembyitem 
                                            @UserNum,  -- ‡πÉ‡∏ä‡πâ @UserNum ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
                                            1, 
                                            1, 
                                            @Item_ID, 
                                            @Item_Option, 
                                            @Item_Duration, 
                                            'Promotion Topup With Discord';

                                        SET @i = @i + 1;  -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ @i ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏õ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                                    END

                                    FETCH NEXT FROM data_cursor INTO @Item_ID, @Item_Option, @Item_Duration, @Item_Unit;
                                END

                                CLOSE data_cursor;
                                DEALLOCATE data_cursor;
                            END
                        END

                        """

                        result_topup = await self.db.execute(query_topup, (user_id,rw_set,CashTopup,))

                        if result_topup != True:
                            if confirm_data['status'] != 1:
                                # print("db error")
                                embed = discord.Embed(
                                    title="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
                                    description=f"‚ùó‚ö†Ô∏è‚Å¥‚Å∞‚Å¥‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                                    color=discord.Color.red()
                                )
                                embed.set_footer(text=footer)
                                await confirm_interaction.response.send_message(embed=embed, ephemeral=True)  # ‚úÖ ‡πÅ‡∏Å‡πâ interaction ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                return

                        # print("success")
                        success_des = f"üîπ **‡∏Ñ‡∏∏‡∏ì {interaction.user.mention}**\n"
                        success_des += f"üëª ‡πÑ‡∏≠‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°: {user_id}\n"
                        success_des += f"üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°: {amount} ‡∏ö‡∏≤‡∏ó\n"
                        success_des += f"üßà ‡πÅ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {CashTopup} Cash\n"
                        success_des += f"üéÅ ‡πÑ‡∏≠‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Cash Inventory\n"
                        success_des += f"üåü ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢\n"
                        embed = discord.Embed(
                            title="‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                            description=success_des,
                            color=discord.Color.gold()
                        )
                        embed.set_footer(text=footer)
                        await confirm_interaction.response.send_message(embed=embed, ephemeral=True)  # ‚úÖ ‡πÉ‡∏ä‡πâ interaction ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                            
                    confirm_button.callback = confirm_button_callback

                    confirm_view = View()
                    confirm_view.add_item(confirm_button)

                    # ‡πÉ‡∏ä‡πâ followup.send() ‡∏™‡πà‡∏á Embed ‡πÅ‡∏•‡∏∞ QR Code
                    await select_interaction.followup.send(embed=embed, file=image_file, view=confirm_view)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ callback ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Select
        select.callback = select_callback

        # ‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô View
        ticket_view = View()
        ticket_view.add_item(select)
        ticket_view.add_item(close_button)

        # ‚úÖ Embed ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        embed = discord.Embed(
            title="‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß!",
            description=f"üîπ **‡∏Ñ‡∏∏‡∏ì {interaction.user.mention}**\nüëª ‡πÑ‡∏≠‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°: {user_id}\nüí∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°",
            color=discord.Color.green()
        )
        embed.set_footer(text=footer)

        await topup_channel.send(embed=embed, view=ticket_view)

        # ‚úÖ Embed ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        embed = discord.Embed(
            title="‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á!",
            description=f"üîπ ‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {topup_channel.mention}",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

class DiscordBot:
    def __init__(self, ENV_DATA, intents=None, log=False):

        if intents is None:
            intents = discord.Intents.default()
            intents.messages = True
            intents.message_content = True

        self.bot = commands.Bot(command_prefix="!", intents=intents)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏•‡∏á‡πÉ‡∏ô bot
        self.bot.db = MSSQLDatabase(ENV_DATA)
        self.bot.ENV_DATA = ENV_DATA
        self.bot.log = log

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° event on_ready
        self.bot.add_listener(self.on_ready)

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        self.bot.add_command(create_topup)

    async def on_ready(self):
        """‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î"""
        print(f'‚úÖ Logged in as {self.bot.user}')
        self.bot.db.connect()

    async def close_bot(self):
        """‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î"""
        self.bot.db.close()

    def run(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Env ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó"""
        if self.bot.ENV_DATA:
            self.bot.run(self.bot.ENV_DATA['TOKEN'])
        else:
            print("‚ùå ENV_DATA is missing!")

# ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™
@commands.command()
async def create_topup(ctx):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô"""
    allowed_roles = ["Admin", "Moderator"]
    if ctx.author.id != ctx.guild.owner_id and not any(role.name in allowed_roles for role in ctx.author.roles):
        return

    create_button = Button(label="üí∞ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô", style=discord.ButtonStyle.green)

    async def create_button_callback(interaction):
        category = interaction.channel.category
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if category:
            existing_channel = discord.utils.get(category.channels, name=f"topup-{interaction.user.name}")
            if existing_channel:
                embed = discord.Embed(
                    title="‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!",
                    description=f"üîπ ‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {existing_channel.mention}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return  

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å `ctx.bot` ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô instance ‡∏Ç‡∏≠‡∏á DiscordBot
        ENV_DATA = ctx.bot.ENV_DATA
        db = ctx.bot.db
        log = ctx.bot.log

        # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏≠‡∏î‡∏µ
        modal = TopupIDModal(ENV_DATA, db, log)
        await interaction.response.send_modal(modal)

    create_button.callback = create_button_callback
    view = View()
    view.add_item(create_button)

    # ‚úÖ Embed ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
    embed = discord.Embed(
        title="üí∞ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
        description="üìå ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        color=discord.Color.blue()
    )
    embed.set_footer(text="‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏≠‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á")

    await ctx.send(embed=embed, view=view)

server_on()

bot = DiscordBot(ENV_DATA)
bot.run()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó
